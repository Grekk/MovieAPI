
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MoviesRememberDB`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=304b0b5d-c557-43e5-8f04-a05f00aca108.sqlserver.sequelizer.com;Database=db304b0b5dc55743e58f04a05f00aca108;User ID=hlymwlymaizejlbq;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace MoviesRememberDB
{
	public partial class MoviesRememberDBDB : Database
	{
		public MoviesRememberDBDB() 
			: base("MoviesRememberDB")
		{
			CommonConstruct();
		}

		partial void CommonConstruct();
		
		public interface IFactory
		{
			MoviesRememberDBDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static MoviesRememberDBDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new MoviesRememberDBDB();
        }

		[ThreadStatic] static MoviesRememberDBDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static MoviesRememberDBDB repo { get { return MoviesRememberDBDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public int Update() 
			{ 
				if (ModifiedColumns==null)
					return repo.Update(this); 

				int retv = repo.Update(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public void Save() 
			{ 
				if (repo.IsNew(this))
					repo.Insert(this);
				else
					Update();
			}
		}
	}
	

    
	[TableName("Memberships")]
	[PrimaryKey("UserId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Membership : MoviesRememberDBDB.Record<Membership>  
    {
        [Column] 
		public Guid ApplicationId 
		{ 
			get
			{
				return _ApplicationId;
			}
			set
			{
				_ApplicationId = value;
				MarkColumnModified("ApplicationId");
			}
		}
		Guid _ApplicationId;

        [Column] 
		public Guid UserId 
		{ 
			get
			{
				return _UserId;
			}
			set
			{
				_UserId = value;
				MarkColumnModified("UserId");
			}
		}
		Guid _UserId;

        [Column] 
		public string Password 
		{ 
			get
			{
				return _Password;
			}
			set
			{
				_Password = value;
				MarkColumnModified("Password");
			}
		}
		string _Password;

        [Column] 
		public int PasswordFormat 
		{ 
			get
			{
				return _PasswordFormat;
			}
			set
			{
				_PasswordFormat = value;
				MarkColumnModified("PasswordFormat");
			}
		}
		int _PasswordFormat;

        [Column] 
		public string PasswordSalt 
		{ 
			get
			{
				return _PasswordSalt;
			}
			set
			{
				_PasswordSalt = value;
				MarkColumnModified("PasswordSalt");
			}
		}
		string _PasswordSalt;

        [Column] 
		public string Email 
		{ 
			get
			{
				return _Email;
			}
			set
			{
				_Email = value;
				MarkColumnModified("Email");
			}
		}
		string _Email;

        [Column] 
		public string PasswordQuestion 
		{ 
			get
			{
				return _PasswordQuestion;
			}
			set
			{
				_PasswordQuestion = value;
				MarkColumnModified("PasswordQuestion");
			}
		}
		string _PasswordQuestion;

        [Column] 
		public string PasswordAnswer 
		{ 
			get
			{
				return _PasswordAnswer;
			}
			set
			{
				_PasswordAnswer = value;
				MarkColumnModified("PasswordAnswer");
			}
		}
		string _PasswordAnswer;

        [Column] 
		public bool IsApproved 
		{ 
			get
			{
				return _IsApproved;
			}
			set
			{
				_IsApproved = value;
				MarkColumnModified("IsApproved");
			}
		}
		bool _IsApproved;

        [Column] 
		public bool IsLockedOut 
		{ 
			get
			{
				return _IsLockedOut;
			}
			set
			{
				_IsLockedOut = value;
				MarkColumnModified("IsLockedOut");
			}
		}
		bool _IsLockedOut;

        [Column] 
		public DateTime CreateDate 
		{ 
			get
			{
				return _CreateDate;
			}
			set
			{
				_CreateDate = value;
				MarkColumnModified("CreateDate");
			}
		}
		DateTime _CreateDate;

        [Column] 
		public DateTime LastLoginDate 
		{ 
			get
			{
				return _LastLoginDate;
			}
			set
			{
				_LastLoginDate = value;
				MarkColumnModified("LastLoginDate");
			}
		}
		DateTime _LastLoginDate;

        [Column] 
		public DateTime LastPasswordChangedDate 
		{ 
			get
			{
				return _LastPasswordChangedDate;
			}
			set
			{
				_LastPasswordChangedDate = value;
				MarkColumnModified("LastPasswordChangedDate");
			}
		}
		DateTime _LastPasswordChangedDate;

        [Column] 
		public DateTime LastLockoutDate 
		{ 
			get
			{
				return _LastLockoutDate;
			}
			set
			{
				_LastLockoutDate = value;
				MarkColumnModified("LastLockoutDate");
			}
		}
		DateTime _LastLockoutDate;

        [Column] 
		public int FailedPasswordAttemptCount 
		{ 
			get
			{
				return _FailedPasswordAttemptCount;
			}
			set
			{
				_FailedPasswordAttemptCount = value;
				MarkColumnModified("FailedPasswordAttemptCount");
			}
		}
		int _FailedPasswordAttemptCount;

        [Column] 
		public DateTime FailedPasswordAttemptWindowStart 
		{ 
			get
			{
				return _FailedPasswordAttemptWindowStart;
			}
			set
			{
				_FailedPasswordAttemptWindowStart = value;
				MarkColumnModified("FailedPasswordAttemptWindowStart");
			}
		}
		DateTime _FailedPasswordAttemptWindowStart;

        [Column] 
		public int FailedPasswordAnswerAttemptCount 
		{ 
			get
			{
				return _FailedPasswordAnswerAttemptCount;
			}
			set
			{
				_FailedPasswordAnswerAttemptCount = value;
				MarkColumnModified("FailedPasswordAnswerAttemptCount");
			}
		}
		int _FailedPasswordAnswerAttemptCount;

        [Column] 
		public DateTime FailedPasswordAnswerAttemptWindowsStart 
		{ 
			get
			{
				return _FailedPasswordAnswerAttemptWindowsStart;
			}
			set
			{
				_FailedPasswordAnswerAttemptWindowsStart = value;
				MarkColumnModified("FailedPasswordAnswerAttemptWindowsStart");
			}
		}
		DateTime _FailedPasswordAnswerAttemptWindowsStart;

        [Column] 
		public string Comment 
		{ 
			get
			{
				return _Comment;
			}
			set
			{
				_Comment = value;
				MarkColumnModified("Comment");
			}
		}
		string _Comment;

	}
    
	[TableName("Profiles")]
	[PrimaryKey("UserId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Profile : MoviesRememberDBDB.Record<Profile>  
    {
        [Column] 
		public Guid UserId 
		{ 
			get
			{
				return _UserId;
			}
			set
			{
				_UserId = value;
				MarkColumnModified("UserId");
			}
		}
		Guid _UserId;

        [Column] 
		public string PropertyNames 
		{ 
			get
			{
				return _PropertyNames;
			}
			set
			{
				_PropertyNames = value;
				MarkColumnModified("PropertyNames");
			}
		}
		string _PropertyNames;

        [Column] 
		public string PropertyValueStrings 
		{ 
			get
			{
				return _PropertyValueStrings;
			}
			set
			{
				_PropertyValueStrings = value;
				MarkColumnModified("PropertyValueStrings");
			}
		}
		string _PropertyValueStrings;

        [Column] 
		public byte[] PropertyValueBinary 
		{ 
			get
			{
				return _PropertyValueBinary;
			}
			set
			{
				_PropertyValueBinary = value;
				MarkColumnModified("PropertyValueBinary");
			}
		}
		byte[] _PropertyValueBinary;

        [Column] 
		public DateTime LastUpdatedDate 
		{ 
			get
			{
				return _LastUpdatedDate;
			}
			set
			{
				_LastUpdatedDate = value;
				MarkColumnModified("LastUpdatedDate");
			}
		}
		DateTime _LastUpdatedDate;

	}
    
	[TableName("Roles")]
	[PrimaryKey("RoleId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Role : MoviesRememberDBDB.Record<Role>  
    {
        [Column] 
		public Guid ApplicationId 
		{ 
			get
			{
				return _ApplicationId;
			}
			set
			{
				_ApplicationId = value;
				MarkColumnModified("ApplicationId");
			}
		}
		Guid _ApplicationId;

        [Column] 
		public Guid RoleId 
		{ 
			get
			{
				return _RoleId;
			}
			set
			{
				_RoleId = value;
				MarkColumnModified("RoleId");
			}
		}
		Guid _RoleId;

        [Column] 
		public string RoleName 
		{ 
			get
			{
				return _RoleName;
			}
			set
			{
				_RoleName = value;
				MarkColumnModified("RoleName");
			}
		}
		string _RoleName;

        [Column] 
		public string Description 
		{ 
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
				MarkColumnModified("Description");
			}
		}
		string _Description;

	}
    
	[TableName("Users")]
	[PrimaryKey("UserId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class User : MoviesRememberDBDB.Record<User>  
    {
        [Column] 
		public Guid ApplicationId 
		{ 
			get
			{
				return _ApplicationId;
			}
			set
			{
				_ApplicationId = value;
				MarkColumnModified("ApplicationId");
			}
		}
		Guid _ApplicationId;

        [Column] 
		public Guid UserId 
		{ 
			get
			{
				return _UserId;
			}
			set
			{
				_UserId = value;
				MarkColumnModified("UserId");
			}
		}
		Guid _UserId;

        [Column] 
		public string UserName 
		{ 
			get
			{
				return _UserName;
			}
			set
			{
				_UserName = value;
				MarkColumnModified("UserName");
			}
		}
		string _UserName;

        [Column] 
		public bool IsAnonymous 
		{ 
			get
			{
				return _IsAnonymous;
			}
			set
			{
				_IsAnonymous = value;
				MarkColumnModified("IsAnonymous");
			}
		}
		bool _IsAnonymous;

        [Column] 
		public DateTime LastActivityDate 
		{ 
			get
			{
				return _LastActivityDate;
			}
			set
			{
				_LastActivityDate = value;
				MarkColumnModified("LastActivityDate");
			}
		}
		DateTime _LastActivityDate;

	}
    
	[TableName("UsersInRoles")]
	[PrimaryKey("UserId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class UsersInRole : MoviesRememberDBDB.Record<UsersInRole>  
    {
        [Column] 
		public Guid UserId 
		{ 
			get
			{
				return _UserId;
			}
			set
			{
				_UserId = value;
				MarkColumnModified("UserId");
			}
		}
		Guid _UserId;

        [Column] 
		public Guid RoleId 
		{ 
			get
			{
				return _RoleId;
			}
			set
			{
				_RoleId = value;
				MarkColumnModified("RoleId");
			}
		}
		Guid _RoleId;

	}
    
	[TableName("user_movie")]
	[PrimaryKey("user_movie_id")]
	[ExplicitColumns]
    public partial class user_movie : MoviesRememberDBDB.Record<user_movie>  
    {
        [Column] 
		public long user_movie_id 
		{ 
			get
			{
				return _user_movie_id;
			}
			set
			{
				_user_movie_id = value;
				MarkColumnModified("user_movie_id");
			}
		}
		long _user_movie_id;

        [Column] 
		public string user_movie_title 
		{ 
			get
			{
				return _user_movie_title;
			}
			set
			{
				_user_movie_title = value;
				MarkColumnModified("user_movie_title");
			}
		}
		string _user_movie_title;

        [Column] 
		public string user_movie_picture 
		{ 
			get
			{
				return _user_movie_picture;
			}
			set
			{
				_user_movie_picture = value;
				MarkColumnModified("user_movie_picture");
			}
		}
		string _user_movie_picture;

        [Column] 
		public DateTime user_movie_release_date 
		{ 
			get
			{
				return _user_movie_release_date;
			}
			set
			{
				_user_movie_release_date = value;
				MarkColumnModified("user_movie_release_date");
			}
		}
		DateTime _user_movie_release_date;

        [Column] 
		public long user_movie_api_id 
		{ 
			get
			{
				return _user_movie_api_id;
			}
			set
			{
				_user_movie_api_id = value;
				MarkColumnModified("user_movie_api_id");
			}
		}
		long _user_movie_api_id;

        [Column] 
		public Guid user_movie_user_id 
		{ 
			get
			{
				return _user_movie_user_id;
			}
			set
			{
				_user_movie_user_id = value;
				MarkColumnModified("user_movie_user_id");
			}
		}
		Guid _user_movie_user_id;

        [Column] 
		public int? user_movie_rate 
		{ 
			get
			{
				return _user_movie_rate;
			}
			set
			{
				_user_movie_rate = value;
				MarkColumnModified("user_movie_rate");
			}
		}
		int? _user_movie_rate;

	}
    
	[TableName("Applications")]
	[PrimaryKey("ApplicationId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Application : MoviesRememberDBDB.Record<Application>  
    {
        [Column] 
		public string ApplicationName 
		{ 
			get
			{
				return _ApplicationName;
			}
			set
			{
				_ApplicationName = value;
				MarkColumnModified("ApplicationName");
			}
		}
		string _ApplicationName;

        [Column] 
		public Guid ApplicationId 
		{ 
			get
			{
				return _ApplicationId;
			}
			set
			{
				_ApplicationId = value;
				MarkColumnModified("ApplicationId");
			}
		}
		Guid _ApplicationId;

        [Column] 
		public string Description 
		{ 
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
				MarkColumnModified("Description");
			}
		}
		string _Description;

	}
}


